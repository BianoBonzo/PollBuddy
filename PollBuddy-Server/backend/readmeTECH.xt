Techonology Used:


#############################################################################

### MongoDB
-The database that PollBuddy uses to store our information
-At the top of the information hierarchy there are collections, e.g. "users"
-Every collection contains .JSON files wtih unique IDs to their collection 
    (these are usually strings of characters and numbers)
-Every ID can then have data types linked to them
    these can be called a lot of things, and every ID in a collection will have the same data types in their .JSON files
    so refer to the routes page to see the types of data each collection holds
    e.g. a user could have the data type "classes" that contains the name of their classes
Example to get the list of classes that user "123" has in an array: 
    mongoConnection.getDB().collection("users").find({ "_id": "123" }, {"_id": 0, "classes": 1})
    .getDB() calls the database
    .collection("users") calls the collection containing all .JSON files for users
    .find({ "_id": "123" }, finds the .JSON file with id "123"
    {"_id": 0, "classes": 1})  and returns the classes data type, while excluding the id type 
    (mongodb automatically returns the id unless it is excluded)
Please note "classes" is not actually a supported data type in "users", it is just an example for this readme
See:   https://docs.mongodb.com/   for the full documentation

##############################################################################

## Node.js
-Node.js is an open source JavaScript runtime environment that allows code to executed outside of a browser
-Node.js is the name of the environment, it is not the name of the file despite ending in .js like JavaScript files do
-It runs a single-threaded event loop while optimizing code to limit blocking 
    (blocking = waiting on one line to execute before calling the next)
-People have written a plethora of packages that run on Node.js that can help with your code
    find packages at: https://www.npmjs.com/
So essentially Node.js is what allows us to run our code on the backend
See:    https://nodejs.org/api/     for the full documentation

##############################################################################

## Express
-Express is a framework that runs within Node.js that allows for server creation and maintenance
-app.js is where the main Express code runs, and the files in the routes folder are linked to app.js with lines like:
    app.use("/api/users", usersRouter);
-this uses the router application built into Express, allowing us to break up the Express calls into seperate files 
-Express works with what it calls "middleware", which are the functions that happen when a call to the server is made
    e.g.:   
            app.get("/api/test", (req, res) => {
                ...CODE...
            }
            
    runs CODE whenever the call for /api/test is made
    and:    
            var usersRouter = require("./routes/users");
            app.use("/api/users", usersRouter);

    directs any calls to /api/users to the file ./routes/users, 
    which is where we store our Express functions for users information
See     https://expressjs.com/en/4x/api.html    for the full documentation

############################################################################

#### NPM Packages Used:
Visit each package link for full documentation, the npm website is really nice
Package names are generally self-explanatory

## http-errors
-Package for creating error messages
NPM Link: https://www.npmjs.com/package/http-errors

## cookie-parser
-package for parsing cookies
NPM link: https://www.npmjs.com/package/cookie-parser

## morgan
-logger package (controls the recording of what happens in when a program runs)
NPM link: https://www.npmjs.com/package/morgan

## bson
-Binary JSON parser
NPM Link: https://www.npmjs.com/package/bson

## bcrypt
-package to help hash passwords
NPM Link: https://www.npmjs.com/package/bcrypt


############################################################################

If you have questions on something that is listed in "required" not listed here,
it is probably a member of something listed here (like Router is a part of Express), 
or someone forgot to add it here (please submit an issue in that case)